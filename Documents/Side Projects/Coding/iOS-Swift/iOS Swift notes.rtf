{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier-Bold;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red44\green44\blue44;\red0\green0\blue0;\red246\green246\blue246;
\red14\green110\blue109;\red210\green0\blue53;\red133\green0\blue2;\red254\green200\blue154;\red255\green255\blue255;
\red0\green0\blue0;\red53\green65\blue117;\red235\green235\blue235;\red252\green104\blue109;\red44\green44\blue44;
\red246\green246\blue246;\red14\green110\blue109;\red53\green65\blue117;\red210\green0\blue53;}
{\*\expandedcolortbl;;\cssrgb\c22745\c22745\c22745;\cssrgb\c0\c0\c0;\cssrgb\c97255\c97255\c97255;
\cssrgb\c0\c50196\c50196;\cssrgb\c86667\c6667\c26667;\cssrgb\c60000\c0\c0;\cssrgb\c100000\c82353\c66667\c80000;\csgray\c100000;
\csgray\c0\c0;\cssrgb\c26667\c33333\c53333;\cssrgb\c93725\c93725\c93725;\cssrgb\c100000\c50196\c50196\c80000;\cssrgb\c22745\c22745\c22745;
\cssrgb\c97255\c97255\c97255;\cssrgb\c0\c50196\c50196;\cssrgb\c26667\c33333\c53333;\cssrgb\c86667\c6667\c26667;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid1\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid101\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid201\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid301\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid401\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\i\fs40 \cf2 \expnd0\expndtw0\kerning0
-interpolation
\i0 . When you interpolate a string, you can mix in a variable (or constant) you declared before along with a string.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls1\ilvl0
\f1\b\fs34 \cf3 \cb4 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
let
\f2\b0 \cf2  \cf5 color\cf2  
\f1\b \cf3 =
\f2\b0 \cf2  \cf6 "blue"\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls1\ilvl0
\f1\b \cf7 \cb4 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
print
\f2\b0 \cf2 (\cf6 "The sky is \\(\cf2 color\cf6 )."\cf2 )\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls1\ilvl0
\f1\b \cf3 \cb4 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
var
\f2\b0 \cf2  \cf5 skySentence\cf2  
\f1\b \cf3 =
\f2\b0 \cf2  \cf6 "The sky is \\(\cf2 color\cf6 )."\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls2\ilvl0
\f1\b \cf7 \cb4 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
print
\f2\b0 \cf2 (skySentence)\cb1 \
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs40 \cf3 \cb8 \
in Swift, a\'a0
\f2\fs34 \cf3 \cb8 String
\f0\fs40 \cf3 \cb8 \'a0can contain any character. In addition to alphanumeric characters like\'a0
\f2\fs34 \cf3 \cb8 a
\f0\fs40 \cf3 \cb8 \'a0and\'a0
\f2\fs34 \cf3 \cb8 9
\f0\fs40 \cf3 \cb8 , they can also be symbols such as\'a0
\f2\fs34 \cf3 \cb8 @
\f0\fs40 \cf3 \cb8 \'a0or\'a0
\f2\fs34 \cf3 \cb8 +
\f0\fs40 \cf3 \cb8 , or even a space. They can also be characters from languages other than English, such as\'a0
\f2\fs34 \cf3 \cb8 \'f1
\f0\fs40 \cf3 \cb8 \'a0or\'a0
\f2\fs34 \cf3 \cb8 \'df
\f0\fs40 \cf3 \cb8 . They can even contain other symbols, like\'a0
\f2\fs34 \cf3 \cb8 \'99
\f0\fs40 \cf3 \cb8 \'a0or\'a0
\f2\fs34 \cf3 \cb8 \'a9
\f0\fs40 \cf3 \cb8 . If you can type it, you can put it in a\'a0
\f2\fs34 \cf3 \cb8 String
\f0\fs40 \cf3 \cb8 !\
\pard\pardeftab720\sl460\partightenfactor0
\cf9 \cb10 \
\cf3 -if don\'92t set value, tell swift type of var: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\partightenfactor0
\ls3\ilvl0
\f1\b\fs34 \cf3 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
var
\f2\b0  ninthPlanet: 
\f1\b String\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\partightenfactor0
\ls3\ilvl0
\f2\b0 \cf3 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs40 \cf2 \cb1 Playgrounds have a nifty feature that let you find out some information (or\'a0
\i metadata
\i0 ) about variables and constants. Hold down the\'a0
\f2 Option
\f0 \'a0key and hover your cursor over the\'a0
\f2\fs34 \cf2 \cb12 thirdPlanet
\f0\fs40 \cf2 \cb1 \'a0in your playground file. It will be highlighted and underlined in blue.\
\
Remember,\'a0\cf3 \cb13 a\'a0
\i method
\i0 \'a0is just a function that is attached to a particular data type. Methods are called like functions, except you put the constant or variable you call on them\'a0
\i before
\i0 \'a0the method name, followed by a dot, and then the name of the method.\cf2 \cb1 \'a0\
\
You can implicitly declar a boolean variable\'a0
\f2\fs34 \cf2 \cb12 let a = false
\f0\fs40 \cf2 \cb1 \'a0or explicitly declare a boolean variable\'a0
\f2\fs34 \cf2 \cb12 let i:Bool = true
\f0\fs40 \cf2 \cb1 .\
\
View LifeCycle\
\pard\pardeftab720\sl500\partightenfactor0

\f2\fs34 \cf2 \cb12 viewDidLoad()
\f0\fs40 \cb1 \'a0is one of the initialization methods that is called on the initial view controller.\'a0
\f2\fs34 \cb12 viewDidLoad()
\f0\fs40 \cb1 \'a0is called\'a0
\i before
\i0 \'a0anything is shown to the user - and it is called only once.\'a0 \
Once the view has actually been loaded (into memory, from the\'a0
\f2\fs34 \cb12 .storyboad
\f0\fs40 \cb1 \'a0file), the Cocoa Touch framework will then call\'a0
\f2\fs34 \cb12 viewWillAppear(_:)
\f0\fs40 \cb1 . \'a0This method is called when the view is about to\'a0
\i appear
\i0 \'a0(be shown on the screen), but before it is actually displayed.\'a0 \'a0\cf3 \cb13 Unlike the 'viewDidLoad()', 'viewWillAppear(_:)' can be called multiple times.  \cf2 \cb1 \'a0\cf3 \cb8 imagine your app has several views, and you can move between them.\'a0  
\f2\fs34 viewWillAppear(_:)
\f0\fs40 \'a0is called every time your view is displayed.\cf2 \cb1 \'a0\
\
\pard\pardeftab720\sl500\partightenfactor0

\f1\b\fs34 \cf2 \cb12 VIEWDIDAPPEAR(_:)
\f0\fs30 \cb1 \
\pard\pardeftab720\sl460\partightenfactor0

\b0\fs40 \cf2 There is one final method called when your view is being displayed to the user:\'a0
\f2\fs34 \cf2 \cb12 viewDidAppear(_:)
\f0\fs40 \cf2 \cb1 . This method is called\'a0
\i after
\i0 \'a0the view is shown to the user. If you change something inside this method (such as animating an image or a piece of text), the user\'a0
\i will
\i0 \'a0see it change.\
\pard\pardeftab720\sl460\partightenfactor0
\cf3 \cb13 Like\'a0
\f2\fs34 \cf3 \cb13 viewWillAppear(_:)
\f0\fs40 \cf3 \cb13 ,\'a0
\f2\fs34 \cf3 \cb13 viewDidAppear(_:)
\f0\fs40 \cf3 \cb13 \'a0is not defined in your view controller by default, but you can add it.\'a0\
\
\pard\pardeftab720\sl500\partightenfactor0

\f2\fs34 \cf2 \cb12 view
\f0\fs40 \cb1 \'a0is an\'a0
\i instance variable
\i0 \'a0that is a part of every view controller.\'a0\
ex 
\f2\fs34 \cb4 \kerning1\expnd0\expndtw0 : \expnd0\expndtw0\kerning0
view
\f1\b \cf3 .
\f2\b0 \cf2 backgroundColor 
\f1\b \cf3 =
\f2\b0 \cf2  
\f1\b \cf11 UIColor\cf3 .\cf7 randomColor
\f2\b0 \cf2 ()\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs40 \cf3 \cb8 The first thing you need to do is associate this view controller with the code you are about to write. The Xcode project already includes a file called\'a0
\f2\fs34 \cf3 \cb8 ViewController.swift
\f0\fs40 \cf3 \cb8 , which defines one class,\'a0
\f2\fs34 \cf3 \cb8 ViewController
\f0\fs40 \cf3 \cb8 \'a0(creative names, huh?). You can associate your new view controller with this class in the Attribute Inspector.\'a0\
\pard\pardeftab720\sl460\partightenfactor0

\i \cf2 \cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \ul \ulc2 IB outlets
\i0 \'a0and\'a0
\i IB actions
\i0 \ulnone \
Swift code is associated with graphical interface elements through the use of outlets and actions. An\'a0
\i IB Outlet
\i0 \'a0(short for\'a0
\i Interface Builder outlet
\i0 ) is a\'a0
\i graphical
\i0 \'a0component that your code\'a0
\i links
\i0 \'a0to. An\'a0
\i IB action
\i0 \'a0is the reverse: It is a method in your\'a0
\i code
\i0 \'a0that a\'a0
\i graphical component
\i0 \'a0links to. It is through these connections that your graphical components are able to do something in response to user input.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\partightenfactor0
\ls4\ilvl0
\f1\b\fs34 \cf3 \cb4 @IBOutlet
\f2\b0 \cf2  
\f1\b \cf3 weak
\f2\b0 \cf2  
\f1\b \cf3 var
\f2\b0 \cf2  \cf5 textDisplay\cf2 : 
\f1\b \cf11 UILabel\cf3 !
\f2\b0 \cf2 \cb1 \
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs40 \cf2 irst, you told the Swift compiler that you were declaring an IB Outlet, using the\'a0
\f2\fs34 \cf2 \cb12 @IBOutlet
\f0\fs40 \cf2 \cb1 \'a0directive. "Hey, I'm about to declare a variable that has a connection to a user interface component."\cf3 \cb13 all IB outlets are\'a0
\f2\fs34 \cf3 \cb13 weak
\f0\fs40 \cf3 \cb13 variables.  Then \cf2 \cb1 you declared a variable (using the\'a0
\f2\fs34 \cf2 \cb12 var
\f0\fs40 \cf2 \cb1 \'a0keyword) named\'a0
\f2\fs34 \cf2 \cb12 textDisplay
\f0\fs40 \cf2 \cb1 . This variable is of type\'a0
\f2\fs34 \cf2 \cb12 UILabel!\

\f0\fs40 \cf2 \cb1 \'a0\cf3 \cb8 You see how there's a little grey dot next to the line of code you just added? That's how you connect your\'a0
\f2\fs34 \cf3 \cb8 textDisplay
\f0\fs40 \cf3 \cb8 \'a0variable to a user interface component.\cf2 \cb1 \'a0\
\
\pard\pardeftab720\sl460\partightenfactor0
\cf3 \cb8 An\'a0
\i \cf3 \cb8 IB action
\i0 \cf3 \cb8 \'a0is nothing more than a method in your view controller class that is tied to a user interface element. When the user interacts with the element (pressing it, entering text, swiping it, and so forth), the method associated with that element is called.\
\
Arrays\
\pard\pardeftab720\sl460\partightenfactor0
\cf14 \cb1 \outl0\strokewidth0 \strokec14 Often an array is initialized first and populated later. Say for example you want to make a shopping list for your weekly shop, but need to wait for your family before filling it with items.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls5\ilvl0
\f1\b\fs34 \cf3 \cb15 \strokec3 var
\f2\b0 \cf14 \strokec14  \cf16 \strokec16 shoppingList\cf14 \strokec14 : [
\f1\b \cf17 \strokec17 String
\f2\b0 \cf14 \strokec14 ]\cb1 \
\
\ls5\ilvl0\cb15 shoppingList 
\f1\b \cf3 \strokec3 =
\f2\b0 \cf14 \strokec14  [\cf18 \strokec18 "Bread"\cf14 \strokec14 , \cf18 \strokec18 "Butter"\cf14 \strokec14 , \cf18 \strokec18 "Cheese"\cf14 \strokec14 , \cf18 \strokec18 "Lettuce"\cf14 \strokec14 , \cf18 \strokec18 "Tomatoes"\cf14 \strokec14 ]\cb1 \
}